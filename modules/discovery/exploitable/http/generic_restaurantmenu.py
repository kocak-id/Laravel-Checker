import framework
# unique to module

class Module(framework.module):

    def __init__(self, params):
        framework.module.__init__(self, params)
        self.register_option('source', 'db', 'yes', 'source of module input')
        self.register_option('validate', True, 'yes', 'validate known SQLi vulnerbility')
        self.register_option('verbose', self.goptions['verbose']['value'], 'yes', self.goptions['verbose']['desc'])
        self.info = {
                     'Name': 'GenericRestaurantMenu Vulnerability Page Finder and Validator',
                     'Author': 'Jay Turla (@shipcod3)',
                     'Description': 'Checks the hosts for possible GenericRestaurantMenu vulnerabilities',
                     'Comments': [
                                  'Source options: [ db | <hostname> | ./path/to/file | query <sql> ]',
                                  'Google Dork: inurl:"view.cfm?category_ID"',
                                  ]
                     }

    def do_run(self, params):
        if not self.validate_options(): return
        # === begin here ===
        self.check_for_genericrestaurantmenu()
    
    def check_for_genericrestaurantmenu(self):
        verbose = self.options['verbose']['value']
        validate = self.options['validate']['value']
        hosts = self.get_source(self.options['source']['value'], 'SELECT DISTINCT host FROM hosts WHERE host IS NOT NULL ORDER BY host')
        if not hosts: return

        # check all hosts for GenericRestaurantMenu Menu Categories Editor Page, SQL Query Info Disclosure, and Possible SQLi Vulnerbility
        protocols = ['http', 'https']
        cnt = 0
        for host in hosts:
            for proto in protocols:
                url = '%s://%s/Menu/admin/' % (proto, host)
                try:
                    resp = self.request(url, redirect=False)
                    code = resp.status_code
                except KeyboardInterrupt:
                    print ''
                    return
                except:
                    code = 'Error'
                if code == 200 and 'Menu Categories' in resp.text:
                    self.alert('%s => %s. Menu Categories Editor Page Found!' % (url, code))
                    cnt += 1
                    if validate == 'true':
                        vulncode = "%s://%s/menu/view.cfm?category_ID=1'" % (proto, host)
                        try:
                            resp = self.request(vulncode, redirect=False)
                            code = resp.status_code
                        except KeyboardInterrupt:
                            print ''
                            return
                        except:
                            code = 'Error'
                        if code == 500 and 'Executing Database Query' in resp.text:
                            self.alert('%s => %s. SQL Query Info Disclosure and Possible SQLi (boolean-based blind) Vulnerability Found!' % (vulncode, code))    
                            cnt += 1
                        else:
                            if verbose: self.output('%s => %s' % (vulncode, code))
                else:
                    if verbose: self.output('%s => %s' % (url, code))
        self.output('%d possibly vulnerable pages found!' % (cnt))
